// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MovieDot.Repository;

#nullable disable

namespace MovieDot.Repository.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220327191818_seed")]
    partial class seed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MovieDot.Core.Models.Actor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Actors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Image = "https://i.pinimg.com/originals/bc/11/eb/bc11eb657ae97991c053ec8dde6fc421.jpg",
                            Name = "Lee Min Ho"
                        },
                        new
                        {
                            Id = 2,
                            Image = "https://i3.posta.com.tr/i/posta/75//750x0/620762d145d2a0c0140efdb1",
                            Name = "Jennifer Lawrence"
                        });
                });

            modelBuilder.Entity("MovieDot.Core.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Marvel"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Dc"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Netflix"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Amazon"
                        });
                });

            modelBuilder.Entity("MovieDot.Core.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CText")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("CommentingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<int?>("Liked")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommentingId");

                    b.HasIndex("MovieId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CText = "Çok güzel bir film.",
                            CreatedDate = new DateTime(2022, 3, 27, 22, 18, 17, 716, DateTimeKind.Local).AddTicks(1206),
                            Liked = 1234,
                            MovieId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CText = "Çok güzel bir film. Alt Yorum.",
                            CommentingId = 1,
                            CreatedDate = new DateTime(2022, 3, 27, 22, 18, 17, 716, DateTimeKind.Local).AddTicks(1216),
                            Liked = 5,
                            MovieId = 1,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("MovieDot.Core.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Aksiyon"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Bilim Kurgu"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Aile"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Romantik"
                        });
                });

            modelBuilder.Entity("MovieDot.Core.Models.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Image = "image.jpg",
                            Name = "Türkçe Dublaj"
                        },
                        new
                        {
                            Id = 2,
                            Image = "image.jpg",
                            Name = "Türkçe Altyazı"
                        },
                        new
                        {
                            Id = 3,
                            Image = "image.jpg",
                            Name = "Orjinal"
                        });
                });

            modelBuilder.Entity("MovieDot.Core.Models.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("Descr")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<float?>("Imdb")
                        .HasColumnType("real");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("Time")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("Views")
                        .HasColumnType("int");

                    b.Property<float?>("Voting")
                        .HasColumnType("real");

                    b.Property<int?>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2022, 3, 27, 22, 18, 17, 716, DateTimeKind.Local).AddTicks(1769),
                            Descr = "Uzay Yolcuları, Morten Tyldum tarafından yönetilen ve senaryosu Jon Spaihts tarafından yazılan 2016 yılı ABD yapımı bilimkurgu-macera filmi. Başrollerinde Chris Pratt ve Jennifer Lawrence yer almaktadır.",
                            Image = "https://tr.web.img3.acsta.net/pictures/16/11/17/14/42/364666.jpg",
                            Imdb = 6f,
                            IsActive = true,
                            Time = 155,
                            Title = "Uzay Yolcuları",
                            Url = "https://tr.web.img4.acsta.net/c_310_420/pictures/16/11/17/14/42/364666.jpg",
                            UserId = 1,
                            Views = 1222,
                            Voting = 345f,
                            Year = 2017
                        });
                });

            modelBuilder.Entity("MovieDot.Core.Models.MovieActor", b =>
                {
                    b.Property<int>("ActorId")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.HasKey("ActorId", "MovieId");

                    b.ToTable("MovieActors");

                    b.HasData(
                        new
                        {
                            ActorId = 1,
                            MovieId = 1
                        });
                });

            modelBuilder.Entity("MovieDot.Core.Models.MovieCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.HasKey("CategoryId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("MovieCategories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            MovieId = 1
                        },
                        new
                        {
                            CategoryId = 2,
                            MovieId = 1
                        });
                });

            modelBuilder.Entity("MovieDot.Core.Models.MovieGenre", b =>
                {
                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.HasKey("GenreId", "MovieId");

                    b.ToTable("MovieGenres");

                    b.HasData(
                        new
                        {
                            GenreId = 1,
                            MovieId = 1
                        });
                });

            modelBuilder.Entity("MovieDot.Core.Models.Part", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("MovieId");

                    b.ToTable("Parts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LanguageId = 1,
                            MovieId = 1,
                            Name = "Part1 ",
                            Url = "https://youtu.be/8GKyQ1S5594"
                        },
                        new
                        {
                            Id = 2,
                            LanguageId = 2,
                            MovieId = 1,
                            Name = "Part2",
                            Url = "https://youtu.be/8GKyQ1S5594"
                        });
                });

            modelBuilder.Entity("MovieDot.Core.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Image")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserRoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserRoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2022, 3, 27, 22, 18, 17, 716, DateTimeKind.Local).AddTicks(2062),
                            Email = "batuhanturk34@gmail.com",
                            Image = "adminprofileimage",
                            IsActive = true,
                            Password = "admin",
                            UserName = "admin",
                            UserRoleId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2022, 3, 27, 22, 18, 17, 716, DateTimeKind.Local).AddTicks(2066),
                            Email = "info@batulab.com",
                            Image = "infoprofileimage",
                            IsActive = true,
                            Password = "info",
                            UserName = "info",
                            UserRoleId = 2
                        });
                });

            modelBuilder.Entity("MovieDot.Core.Models.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Moderatör"
                        },
                        new
                        {
                            Id = 3,
                            Name = "VİP"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Üye"
                        });
                });

            modelBuilder.Entity("MovieDot.Core.Models.Comment", b =>
                {
                    b.HasOne("MovieDot.Core.Models.Comment", "Commenting")
                        .WithMany()
                        .HasForeignKey("CommentingId");

                    b.HasOne("MovieDot.Core.Models.Movie", "Movie")
                        .WithMany("Comments")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieDot.Core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Commenting");

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MovieDot.Core.Models.Movie", b =>
                {
                    b.HasOne("MovieDot.Core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MovieDot.Core.Models.MovieActor", b =>
                {
                    b.HasOne("MovieDot.Core.Models.Actor", "Actor")
                        .WithMany("MovieActors")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieDot.Core.Models.Movie", "Movie")
                        .WithMany("MovieActors")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("MovieDot.Core.Models.MovieCategory", b =>
                {
                    b.HasOne("MovieDot.Core.Models.Category", "Category")
                        .WithMany("MovieCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieDot.Core.Models.Movie", "Movie")
                        .WithMany("MovieCategories")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("MovieDot.Core.Models.MovieGenre", b =>
                {
                    b.HasOne("MovieDot.Core.Models.Genre", "Genre")
                        .WithMany("MovieGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieDot.Core.Models.Movie", "Movie")
                        .WithMany("MovieGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("MovieDot.Core.Models.Part", b =>
                {
                    b.HasOne("MovieDot.Core.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieDot.Core.Models.Movie", "Movie")
                        .WithMany("Parts")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("MovieDot.Core.Models.User", b =>
                {
                    b.HasOne("MovieDot.Core.Models.UserRole", "UserRole")
                        .WithMany()
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("MovieDot.Core.Models.Actor", b =>
                {
                    b.Navigation("MovieActors");
                });

            modelBuilder.Entity("MovieDot.Core.Models.Category", b =>
                {
                    b.Navigation("MovieCategories");
                });

            modelBuilder.Entity("MovieDot.Core.Models.Genre", b =>
                {
                    b.Navigation("MovieGenres");
                });

            modelBuilder.Entity("MovieDot.Core.Models.Movie", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("MovieActors");

                    b.Navigation("MovieCategories");

                    b.Navigation("MovieGenres");

                    b.Navigation("Parts");
                });
#pragma warning restore 612, 618
        }
    }
}
